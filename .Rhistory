# Graph 3
plot(data$Time,data$Sub_metering_1,xlab="",ylab="Energy sub metering",type="l")
points(data$Time,data$Sub_metering_2, type="l",col="red")
points(data$Time,data$Sub_metering_3, type="l",col="blue")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.7,
btw="n")
legend("topright",
#lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.7,
btw="n")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.7,
bty="n")
# Graph 4
plot(data$Time, data$Global_reactive_power,
xlab = "datetime",
ylab = "Global_reactive_power",
type="l")
# Read the data into R
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
# Convert the date and subset the data
data$Date <- as.Date(data$Date , "%d/%m/%Y")
data <- subset(data,data$Date=="2007-02-01"|data$Date=="2007-02-02")
# Convert the time to POSIXlt
data$Time <- strptime(paste(data$Date,data$Time, sep=" "),"%Y-%m-%d %H:%M:%S")
# Set the mfrow
par(mfrow = c(2, 2))
# Launch the graphics device and plot the graph
png("plot4.png", width = 480, height = 480)
# Graph 1
plot(data$Time, data$Global_active_power,
xlab = "",
ylab = "Global Active Power",
type="l")
# Graph 2
plot(data$Time, data$Voltage,
xlab = "datetime",
ylab = "Voltage",
type="l")
# Graph 3
plot(data$Time,data$Sub_metering_1,xlab="",ylab="Energy sub metering",type="l")
points(data$Time,data$Sub_metering_2, type="l",col="red")
points(data$Time,data$Sub_metering_3, type="l",col="blue")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.7,
bty="n")
# Graph 4
plot(data$Time, data$Global_reactive_power,
xlab = "datetime",
ylab = "Global_reactive_power",
type="l")
# Close the graphic device
dev.off()
# Read the data into R
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
# Convert the date and subset the data
data$Date <- as.Date(data$Date , "%d/%m/%Y")
data <- subset(data,data$Date=="2007-02-01"|data$Date=="2007-02-02")
# Convert the time to POSIXlt
data$Time <- strptime(paste(data$Date,data$Time, sep=" "),"%Y-%m-%d %H:%M:%S")
# Launch the graphics device. Plot the Graph. Close the graphics device
png("plot3.png", width = 480, height = 480)
plot(data$Time,data$Sub_metering_1,xlab="",ylab="Energy sub metering",type="l")
points(data$Time,data$Sub_metering_2, type="l",col="red")
points(data$Time,data$Sub_metering_3, type="l",col="blue")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
# Read the data into R
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
# Convert the date and subset the data
data$Date <- as.Date(data$Date , "%d/%m/%Y")
data <- subset(data,data$Date=="2007-02-01"|data$Date=="2007-02-02")
# Convert the time to POSIXlt
data$Time <- strptime(paste(data$Date,data$Time, sep=" "),"%Y-%m-%d %H:%M:%S")
# Launch the graphics device and plot the graph
png("plot4.png", width = 480, height = 480)
# Set the mfrow
par(mfrow = c(2, 2))
# Graph 1
plot(data$Time, data$Global_active_power,
xlab = "",
ylab = "Global Active Power",
type="l")
# Graph 2
plot(data$Time, data$Voltage,
xlab = "datetime",
ylab = "Voltage",
type="l")
# Graph 3
plot(data$Time,data$Sub_metering_1,xlab="",ylab="Energy sub metering",type="l")
points(data$Time,data$Sub_metering_2, type="l",col="red")
points(data$Time,data$Sub_metering_3, type="l",col="blue")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.7,
bty="n")
# Graph 4
plot(data$Time, data$Global_reactive_power,
xlab = "datetime",
ylab = "Global_reactive_power",
type="l")
# Close the graphic device
dev.off()
# Read the data into R
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
# Convert the date and subset the data
data$Date <- as.Date(data$Date , "%d/%m/%Y")
data <- subset(data,data$Date=="2007-02-01"|data$Date=="2007-02-02")
# Convert the time to POSIXlt
data$Time <- strptime(paste(data$Date,data$Time, sep=" "),"%Y-%m-%d %H:%M:%S")
# Launch the graphics device and plot the graph
png("plot4.png", width = 480, height = 480)
# Set the mfrow
par(mfrow = c(2, 2))
# Graph 1
plot(data$Time, data$Global_active_power,
xlab = "",
ylab = "Global Active Power",
type="l")
# Graph 2
plot(data$Time, data$Voltage,
xlab = "datetime",
ylab = "Voltage",
type="l")
# Graph 3
plot(data$Time,data$Sub_metering_1,xlab="",ylab="Energy sub metering",type="l")
points(data$Time,data$Sub_metering_2, type="l",col="red")
points(data$Time,data$Sub_metering_3, type="l",col="blue")
legend("topright",
lty=c(1,1,1),
col=c("black","red","blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
cex=0.8,
bty="n")
# Graph 4
plot(data$Time, data$Global_reactive_power,
xlab = "datetime",
ylab = "Global_reactive_power",
type="l")
# Close the graphic device
dev.off()
# Read the data into R
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
# Convert the date and subset the data
data$Date <- as.Date(data$Date , "%d/%m/%Y")
data <- subset(data,data$Date=="2007-02-01"|data$Date=="2007-02-02")
# Convert the time to POSIXlt
data$Time <- strptime(paste(data$Date,data$Time, sep=" "),"%Y-%m-%d %H:%M:%S")
# Launch the graphics device. Plot the Graph. Close the graphics device
png("plot2.png", width = 480, height = 480)
plot(data$Time, data$Global_active_power,
xlab = "",
ylab = "Global Active Power (kilowatts)",
type="l")
dev.off()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
exit()
quit()
swirl()
library(swirl)
swirl()
submit()
str(by_package)
submit()
reset()
n()
submit()
submit()
pack_sum <- summarize(by_package,
count = n(by_package),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
?arrange
arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique, probs = 0.99)
top_unique<-quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(dat)
View(result3)
submit()
?select
submit()
?mutata
?mutate
submit()
submit()
submit()
submit()
submit()
exit()
reset()
quit()
GETWD()
getwd()
dir()
setwd("../..")
getwd()
setwd("rworkingdir/gettingcleaningdata/courseproject")
dir()
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
View(allLabels)
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
saData <- rbind(subjectTest,subjectTrain)
colnames(saData) <- "SubjectID"
View(saData)
View(saData)
?cbind
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data into the variable allSubjects
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
allSubjects <- rbind(subjectTest,subjectTrain)
colnames(allSubjects) <- "SubjectID"
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
# Read the test and train set
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Bind the subjects, labels and data
allData <- cbind(allSubjects,allLabels,allData)
View(allData)
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
allData <- merge(allData,activityLabel,by.x="ActivityID",by.y="ActivityID")
View(allData)
View(allData)
allData <- allData[,c(2,82,3:81)]
View(allData)
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data into the variable allSubjects
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
allSubjects <- rbind(subjectTest,subjectTrain)
colnames(allSubjects) <- "SubjectID"
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
# Read the test and train set into the variable allData
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Bind the subjects, labels and data
allData <- cbind(allSubjects,allLabels,allData)
# Reads the class labels and their activity name
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Name the label column as ActivityID and merges it with the activity name
allData <- merge(allData,activityLabel,by.x="ActivityID",by.y="ActivityID")
View(allData)
features
aggData <- allData[,c(2,82,3:81)]
View(aggData)
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
View(aggData)
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data into the variable allSubjects
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
allSubjects <- rbind(subjectTest,subjectTrain)
colnames(allSubjects) <- "SubjectID"
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
# Read the test and train set into the variable allData
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Bind the subjects, labels and data
allData <- cbind(allSubjects,allLabels,allData)
# Reads the class labels and their activity name
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Name the label column as ActivityID and merges it with the activity name
allData <- merge(allData,activityLabel,by.x="ActivityID",by.y="ActivityID")
# Reorder the columns for easy reference
aggData <- allData[,c(2,82,3:81)]
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Write the data set
write.table(aggData,"submission.csv")
View(aggData)
View(aggData)
View(aggData)
View(aggData)
View(aggData)
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data into the variable allSubjects
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
allSubjects <- rbind(subjectTest,subjectTrain)
colnames(allSubjects) <- "SubjectID"
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
# Read the test and train set into the variable allData
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Bind the subjects, labels and data
allData <- cbind(allSubjects,allLabels,allData)
# Reads the class labels and their activity name
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Name the label column as ActivityID and merges it with the activity name
allData <- merge(allData,activityLabel,by.x="ActivityID",by.y="ActivityID")
# Reorder the columns for easy reference
aggData <- allData[,c(2,82,3:81)]
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Write the data set
write.table(aggData,"submission.csv")
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data into the variable allSubjects
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
allSubjects <- rbind(subjectTest,subjectTrain)
colnames(allSubjects) <- "SubjectID"
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels) <- "ActivityID"
# Read the test and train set into the variable allData
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Bind the subjects, labels and data
allData <- cbind(allSubjects,allLabels,allData)
# Reads the class labels and their activity name
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Name the label column as ActivityID and merges it with the activity name
allData <- merge(allData,activityLabel,by.x="ActivityID",by.y="ActivityID")
# Reorder the columns for easy reference
aggData <- allData[,c(2,82,3:81)]
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Write the data set
write.table(aggData,"submission.csv")
View(aggData)
